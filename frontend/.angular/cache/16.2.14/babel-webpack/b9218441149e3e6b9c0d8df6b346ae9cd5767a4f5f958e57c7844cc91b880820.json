{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../services/auth.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/card\";\nfunction LoginComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Username is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.error);\n  }\n}\nexport class LoginComponent {\n  constructor(formBuilder, route, router, authService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.authService = authService;\n    this.loading = false;\n    this.submitted = false;\n    this.error = '';\n    // redirect to home if already logged in\n    if (this.authService.currentUserValue) {\n      this.router.navigate(['/']);\n    }\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n  ngOnInit() {}\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.loginForm.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.authService.login(this.f['username'].value, this.f['password'].value).pipe(first()).subscribe(data => {\n      this.router.navigate([this.returnUrl]);\n    }, error => {\n      this.error = error;\n      this.loading = false;\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 14,\n    vars: 5,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"matInput\", \"\", \"placeholder\", \"Username\", \"formControlName\", \"username\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"Password\", \"formControlName\", \"password\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-title\");\n        i0.ɵɵtext(2, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-card-content\")(4, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(5, \"mat-form-field\");\n        i0.ɵɵelement(6, \"input\", 1);\n        i0.ɵɵtemplate(7, LoginComponent_mat_error_7_Template, 2, 0, \"mat-error\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-form-field\");\n        i0.ɵɵelement(9, \"input\", 3);\n        i0.ɵɵtemplate(10, LoginComponent_mat_error_10_Template, 2, 0, \"mat-error\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 4);\n        i0.ɵɵtext(12, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, LoginComponent_mat_error_13_Template, 2, 1, \"mat-error\", 2);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f[\"username\"].errors);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f[\"password\"].errors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n      }\n    },\n    dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.MatInput, i6.MatFormField, i6.MatError, i7.MatButton, i8.MatCard, i8.MatCardContent, i8.MatCardTitle],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","first","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r2","error","LoginComponent","constructor","formBuilder","route","router","authService","loading","submitted","currentUserValue","navigate","loginForm","group","username","required","password","returnUrl","snapshot","queryParams","ngOnInit","f","controls","onSubmit","invalid","login","value","pipe","subscribe","data","_","ɵɵdirectiveInject","i1","FormBuilder","i2","ActivatedRoute","Router","i3","AuthService","_2","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵlistener","LoginComponent_Template_form_ngSubmit_4_listener","ɵɵelement","ɵɵtemplate","LoginComponent_mat_error_7_Template","LoginComponent_mat_error_10_Template","LoginComponent_mat_error_13_Template","ɵɵproperty","errors"],"sources":["/Users/pc/Documents/Angular/college-deadline-tracker/frontend/src/app/components/login/login.component.ts","/Users/pc/Documents/Angular/college-deadline-tracker/frontend/src/app/components/login/login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  loading = false;\n  submitted = false;\n  returnUrl: string;\n  error = '';\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService\n  ) {\n    // redirect to home if already logged in\n    if (this.authService.currentUserValue) {\n      this.router.navigate(['/']);\n    }\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n  ngOnInit() {}\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.loginForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.authService\n      .login(this.f['username'].value, this.f['password'].value)\n      .pipe(first())\n      .subscribe(\n        (data) => {\n          this.router.navigate([this.returnUrl]);\n        },\n        (error) => {\n          this.error = error;\n          this.loading = false;\n        }\n      );\n  }\n}\n","<mat-card>\n    <mat-card-title>Login</mat-card-title>\n    <mat-card-content>\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n        <mat-form-field>\n          <input matInput placeholder=\"Username\" formControlName=\"username\">\n          <mat-error *ngIf=\"submitted && f['username'].errors\">Username is required</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\">\n          <mat-error *ngIf=\"submitted && f['password'].errors\">Password is required</mat-error>\n        </mat-form-field>\n        <button mat-raised-button color=\"primary\" [disabled]=\"loading\">Login</button>\n        <mat-error *ngIf=\"error\">{{error}}</mat-error>\n      </form>\n    </mat-card-content>\n  </mat-card>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}