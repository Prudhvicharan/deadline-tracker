{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../services/auth.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/card\";\nfunction RegisterComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Username is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password must be at least 8 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.error);\n  }\n}\nexport class RegisterComponent {\n  constructor(formBuilder, router, authService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.authService = authService;\n    this.loading = false;\n    this.submitted = false;\n    this.error = '';\n    this.registerForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  ngOnInit() {}\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.registerForm.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.registerForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.authService.register(this.registerForm.value).pipe(first()).subscribe(data => {\n      this.router.navigate(['/login'], {\n        queryParams: {\n          registered: true\n        }\n      });\n    }, error => {\n      this.error = error;\n      this.loading = false;\n    });\n  }\n  static #_ = this.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 15,\n    vars: 6,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"matInput\", \"\", \"placeholder\", \"Username\", \"formControlName\", \"username\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"Password\", \"formControlName\", \"password\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-title\");\n        i0.ɵɵtext(2, \"Register\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-card-content\")(4, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(5, \"mat-form-field\");\n        i0.ɵɵelement(6, \"input\", 1);\n        i0.ɵɵtemplate(7, RegisterComponent_mat_error_7_Template, 2, 0, \"mat-error\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-form-field\");\n        i0.ɵɵelement(9, \"input\", 3);\n        i0.ɵɵtemplate(10, RegisterComponent_mat_error_10_Template, 2, 0, \"mat-error\", 2);\n        i0.ɵɵtemplate(11, RegisterComponent_mat_error_11_Template, 2, 0, \"mat-error\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 4);\n        i0.ɵɵtext(13, \"Register\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(14, RegisterComponent_mat_error_14_Template, 2, 1, \"mat-error\", 2);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f[\"username\"].errors);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && (ctx.f[\"password\"].errors == null ? null : ctx.f[\"password\"].errors[\"required\"]));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && (ctx.f[\"password\"].errors == null ? null : ctx.f[\"password\"].errors[\"minlength\"]));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n      }\n    },\n    dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i5.MatInput, i6.MatFormField, i6.MatError, i7.MatButton, i8.MatCard, i8.MatCardContent, i8.MatCardTitle],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","first","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r3","error","RegisterComponent","constructor","formBuilder","router","authService","loading","submitted","registerForm","group","username","required","password","minLength","ngOnInit","f","controls","onSubmit","invalid","register","value","pipe","subscribe","data","navigate","queryParams","registered","_","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","i3","AuthService","_2","selectors","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵlistener","RegisterComponent_Template_form_ngSubmit_4_listener","ɵɵelement","ɵɵtemplate","RegisterComponent_mat_error_7_Template","RegisterComponent_mat_error_10_Template","RegisterComponent_mat_error_11_Template","RegisterComponent_mat_error_14_Template","ɵɵproperty","errors"],"sources":["/Users/pc/Documents/Angular/college-deadline-tracker/frontend/src/app/components/register/register.component.ts","/Users/pc/Documents/Angular/college-deadline-tracker/frontend/src/app/components/register/register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n  loading = false;\n  submitted = false;\n  error = '';\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService\n  ) {\n    this.registerForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n    });\n  }\n\n  ngOnInit() {}\n\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.registerForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.authService\n      .register(this.registerForm.value)\n      .pipe(first())\n      .subscribe(\n        (data) => {\n          this.router.navigate(['/login'], {\n            queryParams: { registered: true },\n          });\n        },\n        (error) => {\n          this.error = error;\n          this.loading = false;\n        }\n      );\n  }\n}\n","<mat-card>\n    <mat-card-title>Register</mat-card-title>\n    <mat-card-content>\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n        <mat-form-field>\n          <input matInput placeholder=\"Username\" formControlName=\"username\">\n          <mat-error *ngIf=\"submitted && f['username'].errors\">Username is required</mat-error>\n        </mat-form-field>\n        <mat-form-field>\n          <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\">\n          <mat-error *ngIf=\"submitted && f['password'].errors?.['required']\">Password is required</mat-error>\n          <mat-error *ngIf=\"submitted && f['password'].errors?.['minlength']\">Password must be at least 8 characters</mat-error>\n        </mat-form-field>\n        <button mat-raised-button color=\"primary\" [disabled]=\"loading\">Register</button>\n        <mat-error *ngIf=\"error\">{{error}}</mat-error>\n      </form>\n    </mat-card-content>\n  </mat-card>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}