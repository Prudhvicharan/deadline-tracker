{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CollegeService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://api.data.gov/ed/collegescorecard/v1/schools';\n    this.apiKey = '3wAuDRWXKx4TDcS1QLoKAjEkUo6csct8ZPF4xNZX'; // Replace with your actual API key\n  }\n\n  getColleges(page = 0, perPage = 20) {\n    let params = new HttpParams().set('api_key', this.apiKey).set('school.degrees_awarded.predominant', '3,4') // 3 for Bachelor's, 4 for Graduate\n    .set('school.ownership', '1,2') // 1 for public, 2 for private non-profit\n    .set('fields', 'id,school.name,school.city,school.state,school.zip,latest.admissions.admission_rate.overall').set('page', page.toString()).set('per_page', perPage.toString());\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(map(response => response.results.map(uni => ({\n      id: uni.id,\n      name: uni['school.name'],\n      location: `${uni['school.city']}, ${uni['school.state']} ${uni['school.zip']}`,\n      admissionRate: uni['latest.admissions.admission_rate.overall']\n    }))));\n  }\n  searchColleges(searchTerm) {\n    let params = new HttpParams().set('api_key', this.apiKey).set('school.name', searchTerm).set('fields', 'id,school.name,school.city,school.state,school.zip,latest.admissions.admission_rate.overall').set('per_page', '20');\n    return this.http.get(this.apiUrl, {\n      params\n    }).pipe(map(response => response.results.map(uni => ({\n      id: uni.id,\n      name: uni['school.name'],\n      location: `${uni['school.city']}, ${uni['school.state']} ${uni['school.zip']}`,\n      admissionRate: uni['latest.admissions.admission_rate.overall']\n    }))));\n  }\n  // getPrograms(collegeId: string): Observable<any[]> {\n  //   let params = new HttpParams()\n  //     .set('api_key', this.apiKey)\n  //     .set('fields', 'id,latest.programs.cip_4_digit');\n  //   return this.http.get<any>(`${this.apiUrl}/${collegeId}`, { params }).pipe(\n  //     map((response: any) => {\n  //       const programs = response.results[0]['latest.programs.cip_4_digit'];\n  //       return programs.map((program: any) => ({\n  //         name: program.title,\n  //         code: program.code,\n  //       }));\n  //     })\n  //   );\n  // }\n  // getCollegeDetails(collegeId: string): Observable<any> {\n  //   let params = new HttpParams()\n  //     .set('api_key', this.apiKey)\n  //     .set('fields', 'id,school.name');\n  //   return this.http.get<any>(`${this.apiUrl}/${collegeId}`, { params }).pipe(\n  //     map((response) => ({\n  //       id: response.results[0].id,\n  //       name: response.results[0]['school.name'],\n  //     }))\n  //   );\n  // }\n  getCollegeDetails(collegeId) {\n    return this.http.get(`${this.apiUrl}/universities/${collegeId}`);\n  }\n  getPrograms(collegeId) {\n    return this.http.get(`${this.apiUrl}/universities/${collegeId}/programs`);\n  }\n  static #_ = this.ɵfac = function CollegeService_Factory(t) {\n    return new (t || CollegeService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CollegeService,\n    factory: CollegeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpParams","map","CollegeService","constructor","http","apiUrl","apiKey","getColleges","page","perPage","params","set","toString","get","pipe","response","results","uni","id","name","location","admissionRate","searchColleges","searchTerm","getCollegeDetails","collegeId","getPrograms","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/pc/Documents/Angular/college-deadline-tracker/frontend/src/app/services/college.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CollegeService {\n  private apiUrl = 'https://api.data.gov/ed/collegescorecard/v1/schools';\n  private apiKey = '3wAuDRWXKx4TDcS1QLoKAjEkUo6csct8ZPF4xNZX'; // Replace with your actual API key\n\n  constructor(private http: HttpClient) {}\n\n  getColleges(page: number = 0, perPage: number = 20): Observable<any[]> {\n    let params = new HttpParams()\n      .set('api_key', this.apiKey)\n      .set('school.degrees_awarded.predominant', '3,4') // 3 for Bachelor's, 4 for Graduate\n      .set('school.ownership', '1,2') // 1 for public, 2 for private non-profit\n      .set(\n        'fields',\n        'id,school.name,school.city,school.state,school.zip,latest.admissions.admission_rate.overall'\n      )\n      .set('page', page.toString())\n      .set('per_page', perPage.toString());\n\n    return this.http.get<any>(this.apiUrl, { params }).pipe(\n      map((response: any) =>\n        response.results.map((uni: any) => ({\n          id: uni.id,\n          name: uni['school.name'],\n          location: `${uni['school.city']}, ${uni['school.state']} ${uni['school.zip']}`,\n          admissionRate: uni['latest.admissions.admission_rate.overall'],\n        }))\n      )\n    );\n  }\n\n  searchColleges(searchTerm: string): Observable<any[]> {\n    let params = new HttpParams()\n      .set('api_key', this.apiKey)\n      .set('school.name', searchTerm)\n      .set(\n        'fields',\n        'id,school.name,school.city,school.state,school.zip,latest.admissions.admission_rate.overall'\n      )\n      .set('per_page', '20');\n\n    return this.http.get<any>(this.apiUrl, { params }).pipe(\n      map((response: any) =>\n        response.results.map((uni: any) => ({\n          id: uni.id,\n          name: uni['school.name'],\n          location: `${uni['school.city']}, ${uni['school.state']} ${uni['school.zip']}`,\n          admissionRate: uni['latest.admissions.admission_rate.overall'],\n        }))\n      )\n    );\n  }\n\n  // getPrograms(collegeId: string): Observable<any[]> {\n  //   let params = new HttpParams()\n  //     .set('api_key', this.apiKey)\n  //     .set('fields', 'id,latest.programs.cip_4_digit');\n\n  //   return this.http.get<any>(`${this.apiUrl}/${collegeId}`, { params }).pipe(\n  //     map((response: any) => {\n  //       const programs = response.results[0]['latest.programs.cip_4_digit'];\n  //       return programs.map((program: any) => ({\n  //         name: program.title,\n  //         code: program.code,\n  //       }));\n  //     })\n  //   );\n  // }\n\n  // getCollegeDetails(collegeId: string): Observable<any> {\n  //   let params = new HttpParams()\n  //     .set('api_key', this.apiKey)\n  //     .set('fields', 'id,school.name');\n\n  //   return this.http.get<any>(`${this.apiUrl}/${collegeId}`, { params }).pipe(\n  //     map((response) => ({\n  //       id: response.results[0].id,\n  //       name: response.results[0]['school.name'],\n  //     }))\n  //   );\n  // }\n  getCollegeDetails(collegeId: string): Observable<any> {\n    return this.http.get<any>(`${this.apiUrl}/universities/${collegeId}`);\n  }\n\n  getPrograms(collegeId: string): Observable<any[]> {\n    return this.http.get<any[]>(\n      `${this.apiUrl}/universities/${collegeId}/programs`\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}